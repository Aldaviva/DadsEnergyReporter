using System;
using System.Web;
using DadsEnergyReporter.Data;
using DadsEnergyReporter.Injection;
using MimeKit;
using NodaTime;
using NodaTime.Text;

namespace DadsEnergyReporter.Service
{
    public interface ReportFormatter
    {
        MimeMessage FormatReport(Report report);
    }

    [Component]
    internal class ReportFormatterImpl : ReportFormatter
    {
        private static readonly LocalDatePattern SHORT_DATE_PATTERN = LocalDatePattern.CreateWithCurrentCulture("M/d");

        public MimeMessage FormatReport(Report report)
        {
            var viewModel = new ReportViewModel(report);
            return new MimeMessage
            {
                Subject = FormatSubject(report),
                Body = new BodyBuilder
                {
                    TextBody = FormatBodyPlainText(viewModel),
                    HtmlBody = FormatBodyHtml(viewModel)
                }.ToMessageBody()
            };
        }

        private struct ReportViewModel
        {
            private readonly Report report;

            public ReportViewModel(Report report)
            {
                this.report = report;
            }

            private double PowerGenerated => report.PowerGenerated;
            private int PowerBoughtOrSold => report.PowerBoughtOrSold;
            private bool DidPurchase => report.PowerBoughtOrSold >= 0;
            
            public string GeneratedLabel => "Generated by solar panels";
            public string GeneratedValue => $"{PowerGenerated:N0} kWh";

            public string PurchasedOrSoldLabel => $"{(DidPurchase ? "Purchased from" : "Sold to")} O&R";
            public string PurchasedOrSoldAmount => $"{Math.Abs(PowerBoughtOrSold):N0} kWh";
            public string PurchasedOrSoldCost => DidPurchase ? $" for {report.PowerCostCents / 100.0:C}" : "";

            public string TotalLabel => "Total energy consumed";
            public string TotalValue => $"{report.PowerGenerated + report.PowerBoughtOrSold:N0} kWh";
        }

        private static string FormatSubject(Report report)
        {
            return $"Electricity Usage Report for {ShortDate(report.BillingInterval.Start)}–" +
                ShortDate(report.BillingInterval.End);
        }

        private static string FormatBodyPlainText(ReportViewModel model)
        {
            return $@"{model.GeneratedLabel}: {model.GeneratedValue}
{model.PurchasedOrSoldLabel}: {model.PurchasedOrSoldAmount}{model.PurchasedOrSoldCost}
---
{model.TotalLabel}: {model.TotalValue}";
        }

        private static string FormatBodyHtml(ReportViewModel model)
        {
            return $@"<table style=""border-collapse: collapse"">
    <tr><td><b>{model.GeneratedLabel}:</b></td><td style=""text-align: right"">{model.GeneratedValue}</td><td></td></tr>
    <tr><td><b>{HttpUtility.HtmlEncode(model.PurchasedOrSoldLabel)}:</b></td><td style=""text-align: right"">{model.PurchasedOrSoldAmount}</td><td>{model.PurchasedOrSoldCost}</td></tr>
    <tr style=""border-top: 1px solid black""><td><b>{model.TotalLabel}:</b></td><td style=""text-align: right"">{model.TotalValue}</td><td></td></tr>
</table>";
        }

        private static string ShortDate(LocalDate date)
        {
            return SHORT_DATE_PATTERN.Format(date);
        }
    }
}